Resources:
  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: my-table

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              return {
                  "statusCode": 200,
                  "body": json.dumps({
                      "message": "Hello world!"
                  })
              }
      Handler: index.lambda_handler
      Role: !GetAtt MyLambdaRole.Arn
        
      Runtime: python3.8
      
  MyLambdaFunction2:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('my-table')

          def lambda_handler(event, context):
              try:
                  username = json.loads(event['body'])['username']
              except (KeyError, json.JSONDecodeError):
                  return {
                      "statusCode": 400,
                      "body": json.dumps({
                          "error": "Invalid request body"
                      })
                  }

              table.put_item(Item={
                  'username': username
              })

              return {
                  "statusCode": 200,
                  "body": json.dumps({
                      "message": "Data inserted successfully"
                  })
              }


          
      Handler: index.lambda_handler
      Role: !GetAtt MyLambdaRole2.Arn
        
      Runtime: python3.8
  MyLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: 'arn:aws:logs:*:*:*'
            Version: 2012-10-17
          PolicyName: MyLambdaLogsPolicy

  MyLambdaRole2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: 'arn:aws:logs:*:*:*'
              - Action:
                  - 'dynamodb:PutItem'
                Effect: Allow
                Resource: !GetAtt MyDynamoDBTable.Arn
            Version: 2012-10-17
          PolicyName: MyLambdaPolicy
          
    
      
  
  MyApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: MyApi
  MyApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: my-resource
  
  MyApiResource2:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: my-post-request

  MyApiMethod:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: MyLambdaFunction
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
  MyApiMethod2:
    Type: 'AWS::ApiGateway::Method'
    DependsOn: MyLambdaFunction
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyApiResource2
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction2.Arn}/invocations
  
  MyApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub >-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*/*
  MyApiPermission2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt MyLambdaFunction2.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub >-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*/*
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - "MyApiMethod"
      - "MyApiMethod2"
    Properties:
      RestApiId: !Ref MyApiGateway
      Description: My Deployment
      StageName: dev
 
Outputs:
  MyApiEndpoint:
    Value: !Sub >-
      https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/my-resource
  
  MyApiEndpoint2:
    Value: !Sub >-
      https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/my-post-request
  
